/* ------------------------------------------------------------------------------- */
/* Client WEB-Socket implementation                                                */

/* ------------------------------------------------------------------------------- */
/* Variable declaration is generated by agent:
 * var gSocketAddr     = "ws://{}:{}";
 * var eezzWebSocket   = new WebSocket(gSocketAddr);
 * var eezzArguments   = "";
 */
var eezzWebSocket;
var eezzArguments   = "";
  
document.onload = onLoadDelay();
// window.onload = eezzConnect();

function onLoadDelay() {
    if (document.querySelector('body') != null) {
        eezzConnect();
    }
    else {        
        setTimeout( function() { eezzConnect() }, 10 );
    }
}

/* ------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------- */
var eezzAgent = { 
    // Evaluates the elements for the callback functions    
    // --------------------------------------------------------------------------- 
    range : function ( rangeOperator, xElements ) {
        var xList  = [];
        var xMatch = null;
        var xLen   = xElements.length;
        var i;
        
        if (rangeOperator == "[:]") {
            for (i = 0; i < xLen; i++) {
                xList.push( xElements[i] );
            }
            return xList;
        }
        
        // match range operator
        xMatch = rangeOperator.match( /\x5B([0-9]+):([0-9]+)\x5d/ );
        if (xMatch) {
            for (i = Math.min(0, xMatch[1]); i < Math.min(xLen, xMatch[2]); i++) {
                xList.push( xElement[i] );        
            }
            return xList;
        }
        
        // match list operator
        xMatch = rangeOperator.match( /\x5B([\d]+[,\s*\d+]*)\x5d/ );
        if (xMatch2) {
            var xIntLst = xMatch2[1].split(",");
            var xInx;
            for (i = 0; i < xLen; i++) {
                if (i == parseInt( xIntList[i] )) {
                    xList.push( xElement[i] );                  
                }
            }
        }
    },
    
    // Script function to call user layout and animation
    // --------------------------------------------------------------------------- 
    script: function( aJsonArg ) {
        var xContext  = null;
        var xTable    = null;
        var xElements = null;
        var xTblBody  = null;
        var xKey;
        
        // Find the target and setup the drawing context
        if (aJsonArg.context.tagName == 'TABLE') {
            xTable   = aJsonArg.context;
            xTblBody = xTable.getElementsByTagName('TBODY'); 
            aJsonArg['current'] = {
                'header'  : xTable.getElementsByTagName('THEAD'),
                'footer'  : xTable.getElementsByTagName('TFOOT'),
                'context' : xTable.getElementsByTagName('TBODY'),
            };
            
            xTable   = document.createElement('table');
            xTable.innerHTML = aJsonArg.innerHTML;    
            xTblBody = xTable.getElementsByTagName('TBODY');            
            aJsonArg['updnew'] = { 
                'header'  : xTable.getElementsByTagName('THEAD'),
                'footer'  : xTable.getElementsByTagName('TFOOT'),
                'context' : xTable.getElementsByTagName('TBODY'),
            };
            
            if (aJsonArg.current.context.length == 0) {
                return;
            }
            aJsonArg.current.context  = aJsonArg.current.context[0];
            aJsonArg.current.elements = aJsonArg.current.context.getElementsByTagName('TD');
            
            if (aJsonArg.updnew.context.length > 0) {
                aJsonArg.updnew.context   = aJsonArg.updnew.context[0];
                aJsonArg.updnew.filter    = aJsonArg.updnew.context.getElementsByTagName('TD');
                aJsonArg.updnew.elements  = aJsonArg.updnew.filter;
            }
            
            // Update function could only called once for a given cycle
            aJsonArg['update'] = (                     
                function(aJsonContext) {  
                    var aDone = false;
                    
                    return function() {
                        if (aDone) {
                            return;
                        }
                        
                        if (aJsonArg.updnew.context.length == 0) {
                            aJsonArg.updnew = aJsonArg.current;
                        }
                        
                        var xParent = aJsonContext.current.context.parentNode;
                        xParent.replaceChild(aJsonContext.updnew.context, aJsonContext.current.context);
                        // aJsonContext.current.context.replaceWith(aJsonContext.updnew.context);                            

                        if (aJsonContext.current.header.length  > 0 && aJsonContext.updnew.header.length  > 0) {
                            xParent = aJsonContext.current.header[0].parentNode;
                            xParent.replaceChild(aJsonContext.updnew.header[0], aJsonContext.current.header[0]);
                            // aJsonContext.current.header[0].replaceWidth(aJsonContext.updnew.header[0]);
                        }
                        if (aJsonContext.current.footer.length  > 0 && aJsonContext.updnew.footer.length  > 0) {
                            xParent = aJsonContext.current.footer[0].parentNode;
                            xParent.replaceChild(aJsonContext.updnew.footer[0], aJsonContext.current.footer[0]);
                            // aJsonContext.current.footer[0].replaceWith(aJsonContext.updnew.footer[0]);
                        }
                        xParent.deleteCaption();
                        aJsonContext.current.elements.length = 0;
                        aDone = true;
                    }
                } 
            ) (aJsonArg);
        }
        
        // Find the scripting modules
        for (xKey in aJsonArg.script) {
            var xPos = xKey.search("\\[");
            if (xPos < 0) {
                continue;
            }
            
            var xCommand  = xKey.substr(0, xPos);
            var xCmdRange = xKey.substr(xPos);
            var xCmdArgs  = aJsonArg.script[ xKey ];
                
            // evaluate range
            // aJsonArg.updnew.elements = this.range( xCmdRange, aJsonArg.updnew.filter );
            // Collect generators into 
            // aJsonArg.script[xKey].generator = ....
            // In runAnimation: Loop at aJsonArg.script and look for generators            
            if (xCommand == "eezzAgent.animated_circle") {
                var aGenerator = eezzAgent.animated_circle( aJsonArg, xCmdArgs );
                eezzAgent.runAnimation( new Date().getTime(), aGenerator, xCmdArgs );
                // this.circle( xJsonArgs );
            }
            else if (xCommand == "eezzAgent.move") {
                // Move elements
            }
            else {
                try {
                    var aGenerator = eval("( " + xCommand + "( aJsonArg, xCmdArgs ) )");
                    eezzAgent.runAnimation( new Date().getTime(), aGenerator, xCmdArgs );                    
                   //  xxobj.circle( xJsonArgs );
               } catch (e) {
                   alert(e.message);
               }
            }
        }
    },
    
    // --------------------------------------------------------------------------- 
    // Run animation
    // The yield returns the timeout for the next call
    // If the yield is a negative number, the method would request the animation
    // frame.
    // --------------------------------------------------------------------------- 
    runAnimation: function( timestamp, aGenerator, xCmdArgs ) {
        var xResult = aGenerator.next();

        if (!xResult.done) {
            var xTimer = parseInt(xResult.value);
            if (isNaN(xTimer)) {
                return;
            }
            
            if (xTimer >= 0) {
                window.setTimeout( function(){ eezzAgent.runAnimation(timestamp, aGenerator, xCmdArgs); }, xTimer );
            }
            else  {
                requestAnimationFrame( function(timestamp){ runAnimation(timestamp, aGenerator, xCmdArgs); } );
            }
        }
    },
    
    // --------------------------------------------------------------------------- 
    // --------------------------------------------------------------------------- 
    getSize: function( aElement ) {
        var xWidth  = parseInt( aElement.style.width  );
        var xHeight = parseInt( aElement.style.height );
        var xStyle  = getComputedStyle( aElement );
        
        if (isNaN(xWidth)) {
            xWidth  = parseInt( xStyle.getPropertyValue("width") );            
        }        

        if (isNaN(xHeight)) {
            xWidth  = parseInt( xStyle.getPropertyValue("height") );            
        }
        return {'width':xWidth, 'height': xHeight};
    },
    
    // --------------------------------------------------------------------------- 
    // --------------------------------------------------------------------------- 
    getMaxSize: function( aElemList ) {
        var i;
        var xWidth  = 40;
        var xHeigth = 40;
        var xResult;
        
        for (i = 0; i < aElemList.length; i++) {
            xResult = parseInt( aElemList[i].style.width );
            if (!isNaN(xResult)) { 
                xWidth = Math.max( xResult, xWidth );
            }
            
            xResult = parseInt( aElemList[i].style.height );
            if (!isNaN(xResult)) { 
                xHeight = Math.max( xResult,  xHeigth );
            }
        }
        return {'width':xWidth, 'height': xHeigth};
    },

    // --------------------------------------------------------------------------- 
    // --------------------------------------------------------------------------- 
    getGeometry: function( xCmdArgs, aContext, aElements ) {
        if (aElements.length == 0) {
            return {};
        }
        var xViewport = this.getSize( aContext );
        var xElemSize = this.getMaxSize( aElements );
        
        var xGeometry = {
            viewport: xViewport,
            element : xElemSize,
            deltaPhi: 2 * Math.PI / aElements.length,
            center  : { 
                x: xViewport.width / 2.0, 
                y: xViewport.height/ 2.0 
            },
            radius  : { 
                x: xViewport.width / 2.0 - xElemSize.width / 2.0,
                y: xViewport.height/ 2.0 - xElemSize.height/ 2.0
            },
            offset  : {
                x: - xElemSize.width / 2.0,
                y: - xElemSize.height/ 2.0
            }
        }
        return xGeometry;
    },
    
    // --------------------------------------------------------------------------- 
    // layout function to put all elements on a circle
    // --------------------------------------------------------------------------- 
    circle: function* ( xJsonArgs, xCmdArgs ) {
        var i, j, k;

        xJsonArgs.update();
        var xElements = xJsonArgs.updnew.elements;
        if (xElements.length > 0) {
            var xGeometry = this.getGeometry(xCmdArgs, xJsonArgs.updnew.context, xElements);
            for (i = 0; i < xElements.length; i++) {
                for (j = xElements.length - i - 1, k = 0; j < xElements.length; j++, k++) {
                    xElements[j].style.left = ( xGeometry.center.x + xGeometry.radius.x * Math.cos(k * xGeometry.deltaPhi) + xGeometry.offset.x ) + "px";
                    xElements[j].style.top  = ( xGeometry.center.y + xGeometry.radius.y * Math.sin(k * xGeometry.deltaPhi) + xGeometry.offset.y ) + "px";
                }
            }
        }
    },
    
    // --------------------------------------------------------------------------- 
    // layout function to put all elements on a circle
    // --------------------------------------------------------------------------- 
    animated_circle: function* ( xJsonArgs, xCmdArgs ) {
        var i, j, k;        
        
        var xElements = xJsonArgs.current.elements;
        if (xElements.length > 0) {
            var xGeometry = this.getGeometry(xCmdArgs, xJsonArgs.current.context, xElements);
                    
            for (i = 0; i < xElements.length; i++) {
                // xElements[i].parentElement.removeChild( xElements[i] );
                for (j = i + 1, k = 0; j < xElements.length; j++, k++) {
                    xElements[j].style.left = ( xGeometry.center.x + xGeometry.radius.x * Math.cos(k * xGeometry.deltaPhi) + xGeometry.offset.x ) + "px";
                    xElements[j].style.top  = ( xGeometry.center.y + xGeometry.radius.y * Math.sin(k * xGeometry.deltaPhi) + xGeometry.offset.y ) + "px";
                    xElements[j].style.transition = "all " + 0.1 + "s";   
                } 
                yield 100;
            }
        }
        
        xJsonArgs.update();
        var xElements = xJsonArgs.updnew.elements;
        if (xElements.length > 0) {
            var xGeometry = this.getGeometry(xCmdArgs, xJsonArgs.updnew.context, xElements);
            
            // Prepare 
            for (i = 0; i < xElements.length; i++) {
                xElements[i].style.position = "absolute";                    
                xElements[i].style.left = ( xGeometry.center.x + xGeometry.offset.x + xGeometry.radius.x) + "px";
                xElements[i].style.top  = ( xGeometry.center.y + xGeometry.offset.y ) + "px";
                xElements[i].style.transition = "all " + 0.1 + "s";   
                xElements[i].style.physics    = { 
                        "velocity": (2 * Math.PI * xGeometry.radius.x)/1000,  
                        "phi"     : 0,
                        "delay"   : i * 1000 / xElements.length }
            }
            yield 0;
            
            // Set position and wait for animation
            for (i = 0; i < xElements.length; i++) {
                for (j = xElements.length - i - 1, k = 0; j < xElements.length; j++, k++) {
                    xElements[j].style.left = ( xGeometry.center.x + xGeometry.radius.x * Math.cos(k * xGeometry.deltaPhi) + xGeometry.offset.x ) + "px";
                    xElements[j].style.top  = ( xGeometry.center.y + (xGeometry.radius.y-20) * Math.sin(k * xGeometry.deltaPhi) + xGeometry.offset.y ) + "px";
                }    
                yield 100;
            }
        }
        else {
            return;
        }
        
        var xBackgrd = "";
        try {
            var xGeometry = this.getGeometry(xCmdArgs, xJsonArgs.updnew.context, xElements);
            var aCanvas   = document.createElement("canvas");;
            aCanvas.width  = xGeometry.center.x * 2;
            aCanvas.height = xGeometry.center.x * 2;
            
            var aCtx = aCanvas.getContext('2d');
            aCtx.arc(xGeometry.center.x, xGeometry.center.y, Math.min(xGeometry.radius.x, xGeometry.radius.y) + 20, 0, 2 * Math.PI);
            aCtx.lineWidth = 5;
            // aCtx.fillStyle = 'green';
            // aCtx.fill();
            aCtx.strokeStyle = '#003300';
            aCtx.stroke();
            xBackgrd = "url('"  + aCanvas.toDataURL() + "') no-repeat top left";
            xJsonArgs.updnew.context.style.background = xBackgrd;
        }
        catch( xEx ) {
            xBackgrd = xEx.message;
        }
    },
    
    includeHTML: function (aElement, aInclude) {
        xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4) {
            if (this.status == 200) {aElement.innerHTML = this.responseText;}
            if (this.status == 404) {aElement.innerHTML = "Page not found.";}
          }
        }
        xhttp.open("GET", aInclude, true);
        xhttp.send();
    },
}

/* ------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------- */
function eezzConnect() {
    eezzWebSocket   = new WebSocket(gSocketAddr);
    
    eezzWebSocket.onopen = function() { 
        var aParser   = document.createElement('a');
        aParser.href  = document.URL;
        var aJson     = {"path": aParser.pathname, "args": eezzArguments};
        var aDocStr   = document.documentElement.innerHTML;
        var aBodyPos  = aDocStr.indexOf("<body");
        var aJson;
        
        if (aBodyPos > 0) {
            var aMsgHtml = '';
            var aMsgName = '';
            var aMsgLine = document.querySelector('table[data-eezz-template="database"]');
            if (aMsgLine) {
                aMsgHtml = aMsgLine.outerHTML;
                aMsgName = aMsgLine.getAttribute('name');
            }  
            aJson = {
               "path"    : aParser.pathname, 
               "args"    : eezzArguments, 
               "document": aDocStr.substring(aBodyPos),
               "msgobj"  : aMsgHtml,
               "msgname" : aMsgName 
            };
            eezzWebSocket.send(JSON.stringify(aJson));
        }
    }
    
    /* Error handling */
    /* --------------------------------- */
    eezzWebSocket.onerror = function(aError) {
        xEezzStatus = document.getElementById( "eezzConnection" );
        if (xEezzStatus != null) {
            xEezzStatus.style.display = "none";            
        }
        xEezzStatus = document.getElementById( "eezzConnectBrk" );
        if (xEezzStatus != null) {
            xEezzStatus.style.display = "inline";
        }

    }

    /* Wait for the application and update the document          */
    /* - updateValues transfer values within the document        */
    /* - update inserts values calculated by application         */
    /* --------------------------------------------------------- */
    eezzWebSocket.onmessage = function(aEvent) {        
        var aJson = eval("(" + aEvent.data + ")");              

        var xDestination;
        var xSource;

        var xValElement;
        var xDstElement;
        var xDstAttribute;

        var xSrcElement;
        var xSrcAttribute;
        
        var xValue;
        var i;
        
        /* update fragments: transfer values within document */
        for (xKeyElement in aJson.updateValue) {
            xValElement   = decodeURIComponent( aJson.updateValue[xKeyElement] );
            
            xDestination  = xKeyElement.split(".");
            xSource       = xValElement.split('.')
            
            if (xDestination.length != 2) {
                continue;
            }
            
            xDstElement   = document.getElementsByName( xDestination[0] );
            xDstAttribute = xDestination[1];
            
            if (xDstElement.length == 0) {
                continue;
            }
            
            if (xSource.length != 2) {
                continue;
            }
            xSrcElement   = document.getElementsByName(xSource[0]);
            xSrcAttribute = xSource[1];
            
            if (xSrcElement.length == 0) {
                continue;
            }
            
            xValue = xSrcElement[0].getAttribute(xSrcAttribute);
            if (xValue != undefined) {
                xDstElement[0].setAttribute(xDstAttribute, xValue);
            }
        }

        /* update fragments: insert values */
        for (xKeyElement in aJson.update) {
            if (xKeyElement.indexOf('.script') > 0) {
                xDestination  = xKeyElement.split('.');
                var xKeyHtml  = xDestination[0] + '.innerHTML';
                var xJsonArg  = {};
                
                xDstElement   = document.getElementsByName( xDestination[0] );
                if (xDstElement.length == 0) {
                    break;
                }
                
                try {
                    xJsonScript = JSON.parse( decodeURIComponent( aJson.update[xKeyElement] ));
                } catch (xExceptions) {
                    if (xExceptions instanceof SyntaxError) {
                        xJsonScript = aJson.update[xKeyElement];
                    }
                    else {
                        continue;
                    }
                }
                xJsonArg    = {
                    'name'   : xDestination[0], 
                    'context': xDstElement[0], 
                    'script' : xJsonScript  };
                
                delete aJson.update[xKeyElement];
                
                if (aJson.update[xKeyHtml]) {
                    var xTmpUri           = decodeURIComponent( aJson.update[xKeyHtml] );                    
                    xJsonArg['innerHTML'] = decodeURIComponent( xTmpUri );                    
                    delete aJson.update[xKeyHtml];
                }
                eezzAgent.script( xJsonArg );   
                break;
            }
        }                
        
        /* update fragments: insert values */
        for (xKeyElement in aJson.update) {
            xValElement   = decodeURIComponent( aJson.update[xKeyElement] );

            xDestination  = xKeyElement.split(".");
            
            if (xDestination.length < 2) {
                continue;
            }
            xDstElement   = document.getElementsByName( xDestination[0] );
            xDstAttribute = xDestination[1];
            
            if (xDstElement.length == 0) {
                continue;
            }
            
            if (xDstAttribute == 'style') {
                if (xDestination.length > 2) {
                    xDstElement[0].style[xDestination[2]] = xValElement;
                }
                continue;
            }
            
            if (xDstAttribute == 'data-eezz-script') {
                try {
                    eezzAgent.script( xValElement );                
                } catch (aEx) {
                }                
                continue;
            }

            if (xKeyElement.indexOf('innerHTML') >= 0) {
                var xClassAttr = xDstElement[0].getAttribute('class');
                if (xClassAttr != null && 
                    xClassAttr.indexOf('eezzTreeNode') >= 0 &&
                    xDstElement[0].nodeName == 'TR') {
                    eezzTreeInsert(xDestination[0], xValElement);
                }
                else {
                    xDstElement[0].innerHTML = xValElement;
                }
                
                setTimeout(( function(xElemRoot) { return function() {
                    var i;
                    var xStatusLine = xElemRoot.getElementsByClassName("eezzStatusMsg");
                    for (i = 0; i < xStatusLine.length; i++) {
                        xStatusLine[i].style.opacity = 0;
                    }
                 }; } )( xDstElement[0] ), 0 );
            }
            else {
                xDstElement[0].setAttribute(xDstAttribute, xValElement);
            }
        }    
        
        /* async events with the following format for key:value pairs in JSON format  
         * sha1-hash( <path>/<name> ).<event-name> : <value>
         */
        var xJsonAsyncStr;
        var xJsonAsync;
        var xDestAsync;
        var xTreeElem;
               
        for (xKeyElement in aJson.async) {            
            try {
                xValElement   = decodeURIComponent( aJson.async[xKeyElement] );                
                xDestination  = xKeyElement.split(".");
                
                xDstElement   = document.getElementsByName( xDestination[0] )[0];
                xTreeElem     = xDstElement
                if (xDstElement.tagName == 'TD') {
                    xTreeElem = xDstElement.parentNode;
                }
                xJsonAsyncStr = xTreeElem.getAttribute('data-eezz-async');
                xJsonAsyncStr = xJsonAsyncStr.replace(/'/g, '"');
                xJsonAsync    = JSON.parse( xJsonAsyncStr );
                xJsonAsync    = xJsonAsync[ xDestination.slice(1).join('.') ];
                
                for (xEventKey in xJsonAsync) {
                    xDestination = xEventKey.split('.')
                    if (xDestination[0] != 'this') {
                        xDstElement = xDstElement.getElementsByName( xDestination[0] )[0];
                    }
                    
                    if (xDestination[1] == 'innerHTML') {
                        xDstElement.innerHTML = xJsonAsync[ xEventKey ];
                    }
                    else if (xDestination[1] == 'style') {
                        xDstElement.style[ xDestination[2] ] = xJsonAsync[ xEventKey ];
                    }
                    else {
                        xDstElement.setAttibute( xDestination[1] ) = xJsonAsync[ xEventKey ];
                    }
                }
            } catch (aException) {
                continue;
            }
        }        
        
        /* Start reading files */
        if (aJson.files) {
            readFiles(aJson);
        }

        xEezzStatus   = document.getElementById( "eezzConnected" );
        if (xEezzStatus != null) {
            xEezzStatus.innerHTML = "connected";
        }

    }     
}

/* --------------------------------- */
/* --------------------------------- */
function eezzTreeExCo(aElement) {
    var xExpanded;    
    var xTreeHead = aElement;
    var xTreeBody;
    var xTreeNode = aElement;
    var Attribute;
    
    if (xTreeNode.className.indexOf('eezzTreeNode') < 0) {
        return true;
    }
    if (xTreeNode.nextSibling == null) {
        return true;
    }
    if (xTreeNode.nextSibling.className == null) {
        return true;
    }
    if (xTreeNode.nextSibling.className.indexOf('eezzTreeHead') < 0) {
        return true;
    }
    
    xTreeNode.parentNode.removeChild(xTreeNode.nextSibling);    
    var  xFlipElements;
    var  xInx;
    xFlipElements = aElement.getElementsByClassName('eezzClosed');
    for (xInx = 0; xInx < xFlipElements.length; xInx++) {
        xFlipElements[xInx].style.display = 'initial';
    } 
    xFlipElements = aElement.getElementsByClassName('eezzOpend');
    for (xInx = 0; xInx < xFlipElements.length; xInx++) {
        xFlipElements[xInx].style.display = 'none';
    } 
    return false;
}

/* --------------------------------- */
/* --------------------------------- */
function eezzTreeInsert(aElementId, aNodeElement) {
    // Find tree node by id tag element tr
    var aElement     = document.getElementsByName(aElementId)[0];
    
    // The new element should take the entire place
    var aCols = aElement.getElementsByTagName('td').length.toString()

    // Save the header and clear element for new entry
    // var aTreeNodeHdr = aElement.innerHTML;
    // aElement.innerHTML = '';
        
    // Create a new entry
    var aBodyStart  = aNodeElement.indexOf('<tbody'); 
    var xParent     = aElement.parentNode;
    var xTableRow   = document.createElement('tr');    // New entry in table 
    var xTd         = document.createElement('td');    // This will colspan the entire row
    var xTdFormat   = document.createElement('td');    // This will format the tree
    
    xTd.setAttribute('colspan', 100);
    xTableRow.appendChild(xTd);
    xTableRow.appendChild(xTdFormat);
    xTableRow.setAttribute('class', 'eezzTreeNode eezzTreeHead');
    xTableRow.style.position = 'relative';
    
    var xTableBody   = document.createElement('table'); // Container for the node element
    var xTBody; 
    
    xTd.appendChild(xTableBody);
    xTableBody.setAttribute('class', 'eezzTreeBody');
    xTableBody.innerHTML = aNodeElement.substr(aBodyStart);
    
    xTBody = xTableBody.querySelector('tbody');
        
    if (xTBody.getAttribute('name')) {
        var xBodyName = xTBody.getAttribute('name');
        xTBody.removeAttribute('name');
        xTableBody.setAttribute('name', xBodyName);
        //if (aElement.getAttribute('data-eezz-path')) {
        //    xTableBody.setAttribute('data-eezz-path', aElement.getAttribute('data-eezz-path') + '/' + xTableName);
        //}
    }

    try {
        if (aElement.nextSibling.className.indexOf('eezzTreeHead') >=  0) {
            xParent.removeChild(aElement.nextSibling);
        }
    } catch ( xEx ) {}
    
    xParent.insertBefore( xTableRow, aElement.nextSibling );
    
    var xMenus = xTableBody.getElementsByClassName('eezzMenuDialog');
    if (xMenus.length > 0) {
        xTableRow.setAttribute('class', 'eezzTreeNode eezzTreeHead eezzMenuDialog');
        xTableRow.setAttribute('data-eezz-path', aElement.getAttribute('data-eezz-path') );
    }
    
    var  xFlipElements;
    var  xInx;
    xFlipElements = aElement.getElementsByClassName('eezzClosed');
    for (xInx = 0; xInx < xFlipElements.length; xInx++) {
        xFlipElements[xInx].style.display = 'none';
    } 
    xFlipElements = aElement.getElementsByClassName('eezzOpend');
    for (xInx = 0; xInx < xFlipElements.length; xInx++) {
        xFlipElements[xInx].style.display = 'initial';
    } 
}

/* Read one file in chunks           */
/* --------------------------------- */
function readOneFile(aHeader, aFile) {
    var aChunkSize = aHeader.chunkSize;    
    var aSequence  = 0;
    
    for (var i = 0; i < aFile.size; i += aChunkSize) {
        (function(xHeader, xFile, xStart) {
            var aCurrentChunk = Math.min(aChunkSize, xFile.size - xStart);  
            
            var aReader = new FileReader();
            var aBlob   = xFile.slice(xStart, xStart + aChunkSize);
            var xJson   = xHeader;
            
            xJson.file.start     = xStart;
            xJson.file.chunkSize = aCurrentChunk;
            xJson.file.sequence  = aSequence;
            
            aReader.onloadend  = (
                function(xOneJson) {
                    return function(e) {
                    };
                } )(xJson);


            aReader.onprogress  = (
                function(xOneJson) {
                    return function(e) {
                    };
                } )(xJson);
            
            aReader.onload   = (
                function(xOneJson) {
                    var xResponse = JSON.stringify(xOneJson); 
                    return function(e) {
                        eezzWebSocket.send(xResponse);
                        eezzWebSocket.send(e.target.result);
                    };
                } )(xJson);
            
            aReader.readAsArrayBuffer(aBlob);
        } )(aHeader, aFile, i);
        aSequence += 1;
    }
}

/* Read files                        */
/* --------------------------------- */
function readFiles(aHeader) {
    asyncFileCnt      = 0;
    
    for (var i = 0; i < aHeader["files"].length; i++) {
        aElem       = document.getElementsByName(aHeader["files"][i]["source"])[0];
            
        for (var j = 0; j < aElem.files.length; j++) {
            var xFile   = aElem.files[j];
            var xReader = new FileReader();
            
            var xJson   = {
                "file": { 
                    "transfer" : 0,                
                    "chunkSize": xFile.size,
                    "size"     : xFile.size, 
                    "name"     : xFile.name,
                    "source"   : aHeader["files"][i]["source"],
                    "type"     : aHeader["files"][i]["type"]
                }, 
                "reader"   :  aHeader.reader,
                "update"   :  aHeader["files"][i]["update"],
                "progress" :  aHeader["files"][i]["progress"],
                "chunkSize":  aHeader.chunkSize
                };
           
            readOneFile(xJson, xFile);
        }
    }
}

/* Evaluate arguments                */
/* --------------------------------- */
function evalThisArgs( aJson, aTreeElem ) {
    if (aJson.callback) {    
        for (xMethod in aJson.callback) {
            for (xArg in aJson.callback[xMethod]) {
                xSource     = aJson.callback[xMethod][xArg];
                xSplitArgs  = xSource.split('.');
                xSourceElem = aTreeElem;
                
                try {
                    //if (xSource.indexOf('this.data-eezz-path') >= 0) {
                    //    aJson.callback[xMethod][xArg] = xTreePath.concat( '/', aJson['name'] );
                    //}                    
                    if (xSource.indexOf('this.') >= 0) {
                        aJson.callback[xMethod][xArg] = xSourceElem.getAttribute( xSplitArgs[1] );
                    }
                    else if (xSplitArgs.length > 1) {
                        xSourceElem  = document.getElementsByName( xSplitArgs[0] )[0];
                        if ( xSourceElem[ xSplitArgs[1] ]) {
                            aJson.callback[xMethod][xArg] = xSourceElem[ xSplitArgs[1] ]; 
                        }
                        else {
                            aJson.callback[xMethod][xArg] = xSourceElem.getAttribute( xSplitArgs[1] );
                        }
                    }
                } catch (aException) {
                    continue;
                }
            }
        }
    }
}

/* Process easy click events         */
/* --------------------------------- */
function easyClick(aEvent, aElement) {
    var aJStr  = decodeURIComponent(aElement.getAttribute("data-eezz-event"));
    var aJson  = eval("(" + aJStr + ")"); 
    var aDest;
    var aElem;
    var aPost  = false;
    var aValue;
    var aChunkSize   = 65536*2;
    var aElementName = aElement['name'];
    
    aJson['name'] = aElement['name'];

    if (aJson.files) {
        aJson['return'] = {code:0, values:[]};
        aJson.chunkSize = aChunkSize;
        aPost = true;
    }
    
    /* handle tree node events */
    var aTreeElem   = aElement;
    var xNodeElem   = aElement;
    var xTreePath   = '';
    var xCallPath   = '';
    var xIsTreeNode = false;
    
    // Check for tree node for element
    for (xNodeElem = aTreeElem; xNodeElem != null; xNodeElem = xNodeElem.parentNode) {
        if (!xNodeElem.className) {
            continue;
        }             
        if (xNodeElem.className.indexOf('eezzTreeNode') >= 0) {
            aTreeElem   = xNodeElem;
            xIsTreeNode = true;            
            break;
        }
        if (xNodeElem.className.indexOf('eezzTreeNodeRoot') >= 0) {
            break;
        }
    }
    
    if (xIsTreeNode) {
        // In a tree we stop propagation to prevent the entire
        // tree from collapsing
        if (aEvent.stopPropagation) {
            aEvent.stopPropagation();
        }
        else {
            aEvent.cancelBubble();
        }

        // Close all menu dialogs of this tree node
        // 1. Find the common parent 
        // 2. Find all open dialog elements on foreign trees paths
        if (aTreeElem.className.indexOf('eezzMenuDialog') > 0) {
            for (xNodeElem = aTreeElem.parentNode; xNodeElem != null; xNodeElem = xNodeElem.parentNode) {
                if (xNodeElem.className.indexOf('eezzMenuDialog') > 0) {
                    xNodeElem.remove();
                    break;
                }                
            }
        }
        
        var xMenuNodes = aTreeElem.parentNode.querySelectorAll('.eezzTreeHead.eezzMenuDialog');
        for (var i = 0; i < xMenuNodes.length; i++) {
            if (xMenuNodes[i] == aTreeElem.nextSibling) {
                xMenuNodes[i].remove();
                return;
            }
            xMenuNodes[i].remove();
        }
        
        if (aTreeElem.parentNode.className.indexOf('eezzSelectable') >= 0) {
            var i;
            var aStartElem;
            var xSelectInx;
            var xClassNames   = aTreeElem.className.split(' ');
            var xSelecteNodes = aTreeElem.parentNode.querySelectorAll('.eezzSelected');
            
            if (aEvent.ctrlKey) {   
                xSelecteNodes.length = 0;                
            }
            
            if (aEvent.shiftKey) {                
                var xTrElements =  aTreeElem.parentNode.querySelectorAll('tr');
                // select all entries from the selected node to the current node
                for (aElem in xTrElements) {
                    if (aElem === xSelecteNodes[0] || aElem === aTreeElem) {
                        if (aStartElem) {
                            break;
                        }
                        aStartElem = aElem;
                    }
                    if (aStartElem && aElem.className.indexOf('eezzSelected') < 0) {
                        aElem.className.concat(' eezzSelected');
                    }
                }
                xSelecteNodes.length = 0;
            }
            
            for (i = 0; i < xSelecteNodes.length; i++) {
                // remove selection entries
                xClassNames = xSelecteNodes[i].className.split(' ');
                xSelectInx  = xClassNames.indexOf('eezzSelected'); 
                xSelecteNodes[i].className = xClassNames.splice( xSelectInx, 1 ).join(' ');;
            }
            
            if (aTreeElem.className.indexOf('eezzSelected') < 0) {
                aTreeElem.className.concat(' eezzSelected');
            }
        }
    }
    
    // In tree mode we collect the path element
    if (xIsTreeNode) {
        var xPathArr = [];
        var xCallArr = [];
        
        for (xNodeElem = aTreeElem; xNodeElem != null; xNodeElem = xNodeElem.parentNode) {
            if (!xNodeElem.className) {
                continue;        
            }
               
            if (xNodeElem.className.indexOf('eezzTree') >= 0) {
                if (xNodeElem.getAttribute('data-eezz-path')) {
                    aJson['name'] = xNodeElem.getAttribute('name');  
                    xTreePath     = xNodeElem.getAttribute('data-eezz-path');
                    break;
                }
            }
            if (xNodeElem.className.indexOf('eezzTreeNodeRoot') >= 0) {
                break;
            }
        }
     }
     
    var xSource;
    var xSourceElem;
    var xDestElem;
    var xSplitArgs;
    var xValue;
    var xJsnAssign;
    var xNewUpdate = {};
    var xSrcValue = '';
    

    // Propagate the update request and generate callbacks for tree mode
    if (aJson.update) {        
        for (xUpdDest in aJson.update) {
            try {    
                var aNewKey  = xUpdDest;
                var aNewVal  = aJson.update[ xUpdDest ];
                
                if (aNewVal instanceof Object) {
                    aNewVal  = JSON.stringify(aNewVal);
                }
                
                if (aNewKey.indexOf('.innerHTML') >= 0 && xIsTreeNode && aElement.tagName == 'TD') {
                    if (!eezzTreeExCo(aTreeElem)) {
                        return;
                    }                    
                }
                
                if (aNewKey.indexOf('this.') >= 0) {
                    xSplitArgs = aNewKey.split('.');
                    aNewKey    = aTreeElem.getAttribute('name') + '.' + xSplitArgs[1];                    
                }

                // Transfer within a page using {} notation
                if (aNewKey.indexOf('.') > 0) {
                    try {
                        xSplitArgs    = aNewKey.split('.');
                        xSourceElem   = document.getElementsByName( xSplitArgs[0] )[0];
                        xValue        = xSourceElem.getAttribute( xSplitArgs[1] );
                        if (xValue.indexOf('{}') > 0) {
                            xValue.replace(/{}/gi, aNewVal);
                        }                        
                    } catch (aException1) {}
                }
                
                if (xIsTreeNode) {
                    if (aNewVal.indexOf('this.data-eezz-path') >= 0) {
                        aNewKey = aNewKey + '.' + xTreePath;
                    }
                }

                //if (aNewVal.indexOf('this.data-eezz-path') >= 0) {
                //    aNewVal = xTreePath.concat('/', aJson['name']);
                //}
                if (aNewVal.indexOf('this.') >= 0) {
                    xSplitArgs = aNewVal.split('.');
                    if (aTreeElem.getAttribute('name')) {
                        aNewVal = aTreeElem.getAttribute('name') + '.' + xSplitArgs[1];
                    }
                }
                xNewUpdate[ aNewKey ] = aNewVal;                
                
                if (aNewVal.indexOf('.') > 0) {
                    xSplitArgs    = aNewVal.split('.');
                    xSourceElem   = document.getElementsByName( xSplitArgs[0] )[0];
                    xStrAction    = xSourceElem.getAttribute('data-eezz-action');
                    xStrAction    = xStrAction.replace(/'/g, '"');                    
                    xJsnAction    = JSON.parse( xStrAction );
                    
                    if (xJsnAction['eezzAgent.assign'] && xSourceElem.className == 'eezzTreeTemplate') {
                        xJsnAction = xJsnAction['eezzAgent.assign'];
                        
                        if (aJson.callback) { 
                            xJsonPrepare   = {'callback': aJson.callback };
                            evalThisArgs( xJsonPrepare, aTreeElem );
                            eezzWebSocket.send(JSON.stringify(xJsonPrepare));
                        }
                        
                        aJson.callback = {};
                        for (xMethod in xJsnAction) {
                            var xExtMethod = xMethod; // + '.' + xSplitArgs[0];
                            var xWithExtn  = false;
                            
                            for (xArgs in xJsnAction[xMethod]) {
                                var xPathArgument = xJsnAction[xMethod][xArgs];
                                if (xPathArgument.indexOf('data-eezz-path')) {
                                	xWithExtn = true;
                                	break;
                                }
                            }
                            
                            if (xTreePath.length > 1 && xWithExtn) {                                
                                xExtMethod = xMethod + '.' + xTreePath;
                            }
                            
                            // aJson.callback[ xMethod + '.' + xSplitArgs[0] ] = {};
                            aJson.callback[ xExtMethod ] = {};
                            for (xArgs in xJsnAction[xMethod]) {
                                aJson.callback[ xExtMethod ][xArgs] = xJsnAction[xMethod][xArgs];
                            }
                        }
                    }
                }
            } catch (aException) {
                continue;
            }            
        }
        aJson.update = xNewUpdate; 
        aPost        = true;
    }
    
    // Check if parameter are to be transferred directly
    for (xUpdDest in aJson.updateValue) {
        try {
            var aNewKey  = xUpdDest;
            var aNewVal  = aJson.updateValue[ xUpdDest ];

            if (aNewKey.indexOf('.') < 0) {
                continue
            }    
            
            if (aNewKey.indexOf('this.') >= 0) {
                xSplitArgs = aNewKey.split('.');
                aNewKey    = aTreeElem.getAttribute('name') + '.' + xSplitArgs[1];
            }

            if (aNewVal.indexOf('.') < 0) {
                xSrcValue = aNewVal;
            }
            //else if (aNewVal.indexOf('this.data-eezz-path') >= 0) {
            //    xSrcValue   = xTreePath;
            //}
            else if (aNewVal.indexOf('this.') >= 0) {
                xSplitArgs = aNewVal.split('.');                
                aNewVal    = aTreeElem.getAttribute('name') + '.' + xSplitArgs[1];
                xSrcValue  = aTreeElem.getAttribute( xSplitArgs[1] );
            }
            else {
                xSplitArgs = aNewVal.split('.');
                xSrcValue  = document.getElementsByName( xSplitArgs[0] )[0].getAttribute( xSplitArgs[1] );
            }
            
            if (!xSrcValue) {
                continue;
            }
            
            if (aNewKey.indexOf('.innerHTML') >= 0) {
                xSplitArgs = aNewKey.split('.');                    
                document.getElementsByName( xSplitArgs[0] )[0].innerHTML = xSrcValue;
            }
            else {
                xSplitArgs = aNewKey.split('.');                    
                document.getElementsByName( xSplitArgs[0] )[0].setAttribute( xSplitArgs[1], xSrcValue );                    
            }        
            xNewUpdate[ aNewKey ] = aNewVal;
        } catch (aException) {
            continue;
        }
    } 

    // Evaluate argument "this" on method level
    if (aJson.callback) {    
        aPost = true;
        var xNewCallback = {};
        var xNewMethod;
        for (xMethod in aJson.callback) {
            xNewMethod = xMethod;
            if (xMethod.indexOf('this.') >= 0) {
                xSplitArgs = xMethod.split('.');                
                xNewMethod = aTreeElem.getAttribute('name') + '.' + xSplitArgs[1];
            }
            xNewCallback[ xNewMethod ] = aJson.callback[ xMethod ]; 
        }
        aJson.callback = xNewCallback;
    }
    
    // Evaluate argument "this" on method-argument level
    evalThisArgs( aJson, aTreeElem );
/*    
    if (aJson.callback) {    
        aPost = true;
        for (xMethod in aJson.callback) {
            for (xArg in aJson.callback[xMethod]) {
                xSource     = aJson.callback[xMethod][xArg];
                xSplitArgs  = xSource.split('.');
                xSourceElem = aTreeElem;
                
                try {
                    if (xSource.indexOf('this.') >= 0) {
                        aJson.callback[xMethod][xArg] = xSourceElem.getAttribute( xSplitArgs[1] );
                    }
                    else if (xSplitArgs.length > 1) {
                        xSourceElem  = document.getElementsByName( xSplitArgs[0] )[0];
                        if ( xSourceElem[ xSplitArgs[1] ]) {
                            aJson.callback[xMethod][xArg] = xSourceElem[ xSplitArgs[1] ]; 
                        }
                        else {
                            aJson.callback[xMethod][xArg] = xSourceElem.getAttribute( xSplitArgs[1] );
                        }
                    }
                } catch (aException) {
                    continue;
                }
            }
        }
    }
    */

    if (aPost == true) {
        var aResponse = JSON.stringify(aJson);
        eezzWebSocket.send(aResponse);
    }
}
