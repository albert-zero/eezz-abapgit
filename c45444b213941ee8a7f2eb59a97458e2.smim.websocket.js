/* ------------------------------------------------------------------------------- */
/* Client WEB-Socket implementation                                                */

/* ------------------------------------------------------------------------------- */
/* Variable declaration is generated by agent:
 * var gSocketAddr     = "ws://{}:{}";
 * var eezzWebSocket   = new WebSocket(gSocketAddr);
 * var eezzArguments   = "";
 */
var eezzWebSocket;
var eezzArguments   = "";
  
document.onload = eezzConnect();

/* ------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------- */
class eezzAgent  { 
    // Evaluates the elements for the callback functions    
    range ( rangeOperator, xElements ) {
        var xList  = [];
        var xMatch = null;
        var xLen   = xElements.length;
        var i;
        
        if (rangeOperator == "[:]") {
            for (i = 0; i < xLen; i++) {
                xList.push( xElements[i] );
            }
            return xList;
        }
        
        // match range operator
        xMatch = rangeOperator.match( /\x5B([0-9]+):([0-9]+)\x5d/ );
        if (xMatch) {
            for (i = Math.min(0, xMatch[1]); i < Math.min(xLen, xMatch[2]); i++) {
                xList.push( xElement[i] );        
            }
            return xList;
        }
        
        // match list operator
        xMatch = rangeOperator.match( /\x5B([\d]+[,\s*\d+]*)\x5d/ );
        if (xMatch2) {
            var xIntLst = xMatch2[1].split(",");
            var xInx;
            for (i = 0; i < xLen; i++) {
                if (i == parseInt( xIntList[i] )) {
                    xList.push( xElement[i] );                  
                }
            }
        }
    }
    
    // Script function to call user layout and animation
    script ( aJsonStr ) {
        var xJsonObj  = JSON.parse( aJsonStr );
        var xContext  = null;
        var xTable    = null;
        var xElements = null;
        var xKey;
        
        // Defined methods could be specified with range. The range is added to the argument list
        // The context is evaluated as the first parent element with a display attribute        
        if ( xJsonObj.name ) {
            xContext = document.getElementsByName( xJsonObj.name )[0];
            xTable   = xContext;
            while (xContext && xContext.style.display == "" && xContext.tagName != "BODY") {
                xContext = xContext.parentElement;
            }
            
            if (xTable) {
                xElements = xTable.getElementsByTagName("TD");
            }
        }
        
        if (xContext == null || xElements == null) {
            return;
        }
        
        for (xKey in xJsonObj) {
        	var xPos = xKey.search("\\[");
        	if (xPos < 0) {
        		continue;
        	}
        	
        	var xCommand  = xKey.substr(0, xPos);
        	var xCmdRange = xKey.substr(xPos);
            var xCmdArgs  = xJsonObj[ xKey ];
            	
            // evaluate range
            var xElemList = this.range( xCmdRange, xElements );
            var xJsonArgs = JSON.parse( xCmdArgs );
            xJsonArgs["table"]    = xTable;
            xJsonArgs["context"]  = xContext;
            xJsonArgs["elements"] = xElemList;

            if (xCommand == "eezzAgent.circle") {
                this.circle( xJsonArgs );
            }
            else if (xCommand == "eezzAgent.move") {
                // Move elements
            }
            else {
                try {
                	// var xxobj = eval("( myOwn.circle )");
                    var xxobj     = window["myOwn"];
                    xxobj.circle( xJsonArgs );
               } catch (e) {
                   alert(e.message);
               }
            }
        }
    }
    
    // layout function to put all elements on a circle
    circle( xJsonArgs ) {
    	var xStyle;            
    	var xWidth  = parseInt( xJsonArgs.context.style.width  );
    	var xHeight = parseInt( xJsonArgs.context.style.height );
    	
    	if (isNaN(xWidth)) {
    		xStyle  = getComputedStyle( xJsonArgs.context );
    	    xWidth  = parseInt( xStyle.getPropertyValue("width") );
            xHeight = parseInt( xStyle.getPropertyValue("height") );
    	}
    	
    	if (xJsonArgs.elements.length == 0) {
    		return;
    	}
    	
        var i;
    	var xdPhi   = 2 * Math.PI / xJsonArgs.elements.length;
        var xCx     = xWidth  / 2.0;
        var xCy     = xHeight / 2.0;
        var xMargin = 10;

        xWidth  = 0;
        xHeight = 0;
        for (i = 0; i < xJsonArgs.elements.length; i++) {
        	var xStyleWidth;
        	var xStyleHeight;
        	
        	xStyleWidth  = parseInt( xJsonArgs.elements[i].style.width );                	
            xStyleHeight = parseInt( xJsonArgs.elements[i].style.height );
            if (isNaN(xStyleWidth) || isNaN(xStyleHeight)) {
            	continue;
            }                    
            xWidth  = Math.max( xWidth,  parseInt( xStyleWidth  ));
            xHeight = Math.max( xHeight, parseInt( xStyleHeight ));
        }

        var xRx =  xCx - xWidth  / 2.0;
        var xRy =  xCy - xHeight / 2.0;
        
        for (i = 0; i < xJsonArgs.elements.length; i++) {                	
        	xJsonArgs.elements[i].style.position = "absolute";                	
            var posx = Math.floor( xCx + xRx * Math.cos(i * xdPhi) - xWidth /2.0 );
            var posy = Math.floor( xCy + xRy * Math.sin(i * xdPhi) - xHeight/2.0 );

            xJsonArgs.elements[i].style.left = posx + "px";
            xJsonArgs.elements[i].style.top  = posy + "px";
        }    	
    }
}

function eezzConnect() {
	eezzWebSocket   = new WebSocket(gSocketAddr);
    
    eezzWebSocket.onopen = function() { 
        var aParser   = document.createElement('a');
        aParser.href  = document.URL;
        var aJson     = {"path": aParser.pathname, "args": eezzArguments};
        var markup    = document.documentElement.innerHTML;
        var aBodyPos  = markup.indexOf("<body");
        var aJson     = {"path": aParser.pathname, "args": eezzArguments, "document": str.substr(aBodyPos)}; 
        
        eezzWebSocket.send(JSON.stringify(aJson));
    }
    
    /* Error handling */
    /* --------------------------------- */
    eezzWebSocket.onerror = function(aError) {
    	xEezzStatus = document.getElementById( "eezzConnection" );
        if (xEezzStatus != null) {
        	xEezzStatus.style.display = "none";        	
        }
        xEezzStatus = document.getElementById( "eezzConnectBrk" );
        if (xEezzStatus != null) {
        	xEezzStatus.style.display = "inline";
        }

    }

    /* Wait for the application and update the document          */
    /* - updateValues transfer values within the document        */
    /* - update inserts values calculated by application         */
    /* --------------------------------------------------------- */
    eezzWebSocket.onmessage = function(aEvent) {    	
        var aJson = eval("(" + aEvent.data + ")");              

        var xDestination;
        var xSource;

        var xValElement;
        var xDstElement;
        var xDstAttribute;

        var xSrcElement;
        var xSrcAttribute;
        
        var xValue;
        
        /* update fragments: transfer values within document */
        for (xKeyElement in aJson.updateValue) {
            xValElement   = decodeURIComponent( aJson.updateValue[xKeyElement] );
            
            xDestination  = xKeyElement.split(".");
            xSource       = xValElement.split('.')
            
            if (xDestination.length != 2) {
            	continue;
            }
            
            xDstElement   = document.getElementsByName( xDestination[0] );
            xDstAttribute = xDestination[1];
            
            if (xDstElement.length == 0) {
            	continue;
            }
            
            if (xSource.length != 2) {
            	continue;
            }
            xSrcElement   = document.getElementsByName(xSource[0]);
            xSrcAttribute = xSource[1];
            
            if (xSrcElement.length == 0) {
            	continue;
            }
            
            xValue = xSrcElement[0].getAttribute(xSrcAttribute);
            if (xValue != undefined) {
            	xDstElement[0].setAttribute(xDstAttribute, xValue);
            }
        }

        /* update fragments: insert values */
        for (xKeyElement in aJson.update) {
            xValElement   = decodeURIComponent( aJson.update[xKeyElement] );

            xDestination  = xKeyElement.split(".");
            
            if (xDestination.length < 2) {
            	continue;
            }
            xDstElement   = document.getElementsByName( xDestination[0] );
            xDstAttribute = xDestination[1];
            
            if (xDstElement.length == 0) {
            	continue;
            }
            
            if (xDstAttribute == 'style') {
            	if (xDestination.length > 2) {
            		xDstElement[0].style[xDestination[2]] = xValElement;
            	}
            	continue;
            }
            
            if (xDstAttribute == 'data-eezz-script') {
            	try {
            		eezzAgent.script( xValElement );            	
            	} catch (aEx) {
            	}                
            	continue;
            }

            if (xDstElement[0].getAttribute('class') == 'eezzTreeNode') {
            	if (xDestination.length < 3) {
            		continue;
            	}
            	eezzTreeInsert(xDestination[2], xValElement);
            	break;
            }
            else {
                if (xDstAttribute == 'innerHTML') {
                	xDstElement[0].innerHTML = xValElement;
                }
                else {
                	xDstElement[0].setAttribute(xDstAttribute, xValElement);
                }
            }
        }    
    	
        /* Start reading files */
        if (aJson.files) {
            readFiles(aJson);
        }

        xEezzStatus   = document.getElementById( "eezzConnected" );
        if (xEezzStatus != null) {
        	xEezzStatus.innerHTML = "connected";
        }

    }     
}

/* --------------------------------- */
/* --------------------------------- */
function eezzTreeExCo(aElement) {
	var xExpanded = aElement.getAttribute('eezz-tree-expanded');	
	if (xExpanded == 'expanded') {
		var aTreeNodeHdr = aElement.getElementsByTagName('thead')
		for (i = 0; i < aTreeNodeHdr.length; i++) {
			aElement.innerHTML = aTreeNodeHdr[i].innerHTML;
			break;
		}
		aElement.setAttribute('eezz-tree-expanded', 'collapsed');
		return false;
	}
	else if (xExpanded == undefined) {
		aElement.setAttribute('eezz-tree-expanded', 'collapsed');
		return true;
	}
	else if (xExpanded == 'expanded') {
		aElement.setAttribute('eezz-tree-expanded', 'collapsed');
		return true;
	}
	else {
		return true;
	}
}

/* --------------------------------- */
/* --------------------------------- */
function eezzTreeInsert(aElementId, aNodeElement) {
	// Find tree node by id tag element tr
	var aElement     = document.getElementById(aElementId)
	var xExpanded    = aElement.getAttribute('eezz-tree-expanded');	

	if (xExpanded == 'expanded') {
		eezzTreeExCo(aElement);
	}
	if (aElementId == 'id000000') {
		aElement.innerHTML = aNodeElement;
		return;
	}
	// Save the header
	var aTreeNodeHdr = aElement.innerHTML;
	
	// The new element should take the entire place
	var aCols = aElement.getElementsByTagName('td').length.toString()
	// Clear element for new entry
	aElement.innerHTML = '';
        

	// Create a new entry
	var xTd         = document.createElement('td');
	var xTableHead  = document.createElement('table');
	var xTableBody  = document.createElement('table');
    
	xTableBody.setAttribute('class', 'eezzTreeNode');
	
    var xTHead  = document.createElement('thead');
    var xTBody  = document.createElement('tbody');

    xTBody.setAttribute('class', 'eezzTreeNode');
    xTHead.setAttribute('class', 'eezzTreeNode');
    xTableHead.appendChild(xTHead);
    xTableBody.appendChild(xTBody);

    xTd.setAttribute('class', 'eezzTreeNode');
    xTd.setAttribute('colspan', aCols);
    xTd.appendChild(xTableHead);
    xTd.appendChild(xTableBody);
    
    
    xTHead.innerHTML = aTreeNodeHdr
    xTBody.innerHTML = aNodeElement
        
    aElement.appendChild(xTd);
    aElement.setAttribute('eezz-tree-expanded', 'expanded');
}

/* Read one file in chunks           */
/* --------------------------------- */
function readOneFile(aHeader, aFile) {
    var aChunkSize = aHeader.chunkSize;    
    var aSequence  = 0;
    
    for (var i = 0; i < aFile.size; i += aChunkSize) {
        (function(xHeader, xFile, xStart) {
            var aCurrentChunk = Math.min(aChunkSize, xFile.size - xStart);  
            
            var aReader = new FileReader();
            var aBlob   = xFile.slice(xStart, xStart + aChunkSize);
            var xJson   = xHeader;
            
            xJson.file.start     = xStart;
            xJson.file.chunkSize = aCurrentChunk;
            xJson.file.sequence  = aSequence;
            
            aReader.onloadend  = (
                function(xOneJson) {
                    return function(e) {
                    };
                } )(xJson);


            aReader.onprogress  = (
                function(xOneJson) {
                    return function(e) {
                    };
                } )(xJson);
            
            aReader.onload   = (
                function(xOneJson) {
                    var xResponse = JSON.stringify(xOneJson);                                
                    return function(e) {
                        eezzWebSocket.send(xResponse);
                        eezzWebSocket.send(e.target.result);
                    };
                } )(xJson);
            
            aReader.readAsArrayBuffer(aBlob);
        } )(aHeader, aFile, i);
        aSequence += 1;
    }
}

/* Read files                        */
/* --------------------------------- */
function readFiles(aHeader) {
    asyncFileCnt      = 0;
    
    for (var i = 0; i < aHeader["files"].length; i++) {
	    aElem       = document.getElementsByName(aHeader["files"][i]["source"])[0];
	        
	    for (var j = 0; j < aElem.files.length; j++) {
	        var xFile   = aElem.files[j];
	        var xReader = new FileReader();
	        
	        var xJson   = {
	            "file": { 
	                "chunkSize": xFile.size,
	                "size"     : xFile.size, 
	                "name"     : xFile.name,
	                "source"   : aHeader["files"][i]["source"],
	                "type"     : aHeader["files"][i]["type"]
	            }, 
	            "reader"   :  aHeader.reader,
	            "update"   :  aHeader["files"][i]["update"],
	            "progress" :  aHeader["files"][i]["progress"],
	            "chunkSize":  aHeader.chunkSize
	            };
	       
	        readOneFile(xJson, xFile);
	    }
    }
}

/* Process easy click events         */
/* --------------------------------- */
function easyClick(aEvent, aElement) {
    var aJStr  = decodeURIComponent(aElement.getAttribute("data-eezz-event"));
    var aJson  = eval("(" + aJStr + ")"); 
    var aDest;
    var aElem;
    var aPost  = false;
    var aValue;
    var aChunkSize = 65536*2;

    aJson['name'] = aElement['name'];
        
    if (aJson.files) {
        aJson['return'] = {code:0, values:[]};
        aJson.chunkSize = aChunkSize;
        aPost = true;
    }

    /* Generate a callback request */
    if (aJson.callback) {    
        aPost = true;
	    for (xMethod in aJson.callback) {
	        for (xArg in aJson.callback[xMethod]) {
	            aDest = aJson.callback[xMethod][xArg];
	            
	            if (typeof aDest === 'string' && aDest.indexOf(".") >= 0) {
	                aDest = aJson.callback[xMethod][xArg].split("."); 
	            
	                if (aDest[0] == "this") {
	                	aElem = aElement
	                }
	                else {
	                    aElem  = document.getElementsByName(aDest[0])[0];	                	
	                }
	                
	                aValue = aElem[aDest[1]]
	                if (aValue == undefined) {
	                	aValue = aElem.getAttribute(aDest[1]);
	                }
	                aJson.callback[xMethod][xArg] = aValue;	                
	            }
	            else {
	                aJson.callback[xMethod][xArg] = aDest;
	            }                        
	        }
	    }
    }

    /* transfer a value from one element to another                */
    /* eezz-agent sets updateValue, if it can't find this property */
    if (aJson.updateValue) {
    	for (xSource in aJson.updateValue) {
    		aSrc     = xSource.split(".")
    		aSrcElem = document.getElementsByName( aSrc[0] );
    		
    		if (aSrcElem.length > 0) {
    			aValue  = aSrcElem[0].getAttribute( aSrc[1] );
    		}
    	}
    }
    
    if (aJson.update) {
    	aPost = true;
    }
    
    if (aElement.getAttribute('class') == 'eezzTreeLeaf') {
    	if (aEvent.stopPropagation) {
    		aEvent.stopPropagation();
    	}
    	else {
    		aEvent.cancelBubble();
    	}    	
    }
    
    if (aElement.getAttribute('class') == 'eezzTreeNode') {
    	aPost = eezzTreeExCo(aElement);
    	if (aEvent.stopPropagation) {
    		aEvent.stopPropagation();
    	}
    	else {
    		aEvent.cancelBubble();
    	}
    }
    
    if (aPost == true) {
        var aResponse = JSON.stringify(aJson);
        eezzWebSocket.send(aResponse);
    } 
}
